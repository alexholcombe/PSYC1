three <- tc %>% filter(numSimultaneousStim==3)
library(dplyr)
three <- tc %>% filter(numSimultaneousStim==3)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
dataWithPath<- file.path("dataAnonymized","PSYC1anonymized")
#tb<- read_csv(  paste0(dataWithPath,".csv") )
tb<- readRDS( paste0(dataWithPath,".rda") )
#add practice column
practiceTrials = 5
tb<- tb %>% mutate(practice= (trialnum<practiceTrials))
tb <- tb %>% mutate(cond = paste(numSimultaneousStim, stimType, spatial, ori, flipped, sep = '_'))
#devtools::install_github("ropenscilabs/skimr")
#install.packages("tidyselect")  and from source to get 0.2.4 needed
library(skimr)
#skim(tb)
#get one trial per subject so can easily examine simple demographics like first language
firstTrial <- tb %>% filter(trialnum==0)
table(firstTrial$cond)
table(firstTrial$Yconsent,firstTrial$YshareData, dnn=c("consent","shareData"), useNA="ifany")
tc <- tb %>% filter(Yconsent == TRUE, YshareData==TRUE)
firstTrial <- tc %>% filter(trialnum==0)
table(firstTrial$firstReadLang)
table(firstTrial$"What is your age?")
table(firstTrial$"What is your biological sex?")
table(firstTrial$handedness)
library(dplyr)
three <- tc %>% filter(numSimultaneousStim==3)
View(three)
table(three$subject)
count(unique(three$subject)))
count(unique(three$subject))
length(unique(three$subject))
?suummarise_each
?summarise_each
tc %>% filter(practice==FALSE) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
table(tc$correct1)
table(tc$correct1,tc$correct0)
table(tc$correct0)
table(tc$correct2)
dd<- tc %>% filter(correct1==-999)
head(dd)
dd
dd<- tc %>% filter(correct1==-99)
dd
Vew(dd)
View(dd)
three %>% filter(practice==FALSE) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
three<- three  %>% filter(practice==FALSE)
three %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
t_horiz <- t.test(
x = three$correct0
, y = three$correct1
, paired = FALSE
)
t_horiz
oneTwo <- t.test(
x = three$correct0
, y = three$correct1
, paired = FALSE
)
oneTwo
twoThree <- t.test(
x = three$correct1
, y = three$correct2
, paired = FALSE
)
twoThree
names(three)
collapsed <- three %>% group_by(subject) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
head(collapsed)
collapsed
collapsed <- three %>% group_by(subject) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
oneTwo <- t.test(
x = collapsed$correct0
, y = collapsed$correct1
, paired = FALSE
)
oneTwo
twoThree <- t.test(
x = collapsed$correct1
, y = collapsed$correct2
, paired = FALSE
)
twoThree
collapsed %>% group_by(firstReadLang) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
names(collapseD)
names(collapsed)
three %>% group_by(subject,firstReadLang) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
three %>% group_by(subject %>% %>% summarise_all(funs(if_else(is.numeric(.), mean(.), first(.))))
three %>% group_by(subject) %>% summarise_all(funs(if_else(is.numeric(.), mean(.), first(.))))
three %>% group_by(subject) %>% summarise_all(funs(if_else(is.numeric(.), mean(.), NaN))) #first(.)
collapsed <- three %>% group_by(subject) %>% summarise_all(funs(if_else(is.numeric(.), mean(.), NaN))) #first(.)
collapsed %>% group_by(firstReadLang) %>% summarise_all(funs(if_else(is.numeric(.), mean(.), NaN))) #first(.)
collapsed %>% group_by(firstReadLang) %>%  summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
?summarise_at
#try keeping language only
cc <- collapsed %>% select(correct0,correct1,correct2,firstReadLang)
head(cc)
#try keeping language only
cc <- three %>% select(correct0,correct1,correct2,firstReadLang)
cc %>%    summarise_all(funs(if_else(is.numeric(.), mean(.), first(.)))) #first(.)
head(cc)
cc %>%    summarise_all(funs(if_else(is.numeric(.), mean(.), last(.)))) #first(.)
cc %>% summarise_if( is.numeric, mean)
cc %>%  group_by(firstReadLang) %>% summarise_all(funs(if_else(is.numeric(.), mean(.), last(.)))) #first(.)
cc %>%  group_by(firstReadLang) %>% summarise_if( is.numeric, mean)
table(three$firstReadLang)
table(three$firstReadLang,three$subject)
ccol <- three %>% group_by(subject,firstReadLang) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
ccol
collapsedSubjLang <- three %>% group_by(subject,firstReadLang) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
collapsedSubjLang %>% summarise_if( is.numeric, mean)
collapsedSubjLang
collapsedSubjLang %>% group_by(firstReadLang) %>% summarise_all(mean)
table(collapsedSubjLang$firstReadLang)
engSino <- t.test(
x = (collapsedSubjLang %>% filter(firstReadLang=="Chinese"))$correct0
, y = (collapsedSubjLang %>% filter(firstReadLang=="English"))$correct0
, paired = FALSE
)
engSino
engSino <- t.test(
x = (collapsedSubjLang %>% filter(firstReadLang=="Chinese"))$correct1
, y = (collapsedSubjLang %>% filter(firstReadLang=="English"))$correct1
, paired = FALSE
)
engSino
engSino <- t.test(
x = (collapsedSubjLang %>% filter(firstReadLang=="Chinese"))$correct2
, y = (collapsedSubjLang %>% filter(firstReadLang=="English"))$correct2
, paired = FALSE
)
engSino
collapsedSubjLang <- three %>% group_by(subject,firstReadLang) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
collapsedSubjLang %>% group_by(firstReadLang) %>% summarise_all(mean)  #works
mean(1,2,3)
mean(c(1,2,3))
bySubj <- three %>% group_by(subject) %>% mutate(avgCorr = mean(c("correct0","correct1","correct2"))
)
warnings()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
dataWithPath<- file.path("dataAnonymized","PSYC1anonymized")
#tb<- read_csv(  paste0(dataWithPath,".csv") )
tb<- readRDS( paste0(dataWithPath,".rda") )
#add practice column
practiceTrials = 5
tb<- tb %>% mutate(practice= (trialnum<practiceTrials))
tb <- tb %>% mutate(cond = paste(numSimultaneousStim, stimType, spatial, ori, flipped, sep = '_'))
#devtools::install_github("ropenscilabs/skimr")
#install.packages("tidyselect")  and from source to get 0.2.4 needed
library(skimr)
#skim(tb)
#get one trial per subject so can easily examine simple demographics like first language
firstTrial <- tb %>% filter(trialnum==0)
table(firstTrial$cond)
table(firstTrial$Yconsent,firstTrial$YshareData, dnn=c("consent","shareData"), useNA="ifany")
tc <- tb %>% filter(Yconsent == TRUE, YshareData==TRUE)
firstTrial <- tc %>% filter(trialnum==0)
table(firstTrial$firstReadLang)
table(firstTrial$"What is your age?")
table(firstTrial$"What is your biological sex?")
table(firstTrial$handedness)
three <- tc %>% filter(numSimultaneousStim==3) %>% filter(practice==FALSE)
three %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
table(three$correct0,useNA="ifany")
three$correct0
bySubj <- three %>% group_by(subject) %>% mutate(avgCorr = mean(c("correct0","correct1","correct2")))
bySubj
three %>% group_by(subject) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE) %>%
summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
bySubj <- three %>% group_by(subject) %>% mutate(avgCorr = mean((correct0 + correct1 + correct2)/3)
c("correct0","correct1","correct2")))
bySubj <- three %>% group_by(subject) %>% mutate(avgCorr = mean((correct0 + correct1 + correct2)/3))
bySubj
three
three %>% un_group() %>% group_by(subject) %>% summarise_at(mean((correct0 + correct1 + correct2)/3))
three %>% group_by(subject) %>% summarise_at(mean((correct0 + correct1 + correct2)/3))
three %>% group_by(subject) %>% mutate(avgCorr = (correct0 + correct1 + correct2)/3))
three %>% group_by(subject) %>% mutate(avgCorr = (correct0 + correct1 + correct2)/3)
ti <- th %>% group_by(subject) %>% summarise_at(mean, avgCorr)
th<- three %>% group_by(subject) %>% mutate(avgCorr = (correct0 + correct1 + correct2)/3)
ti <- th %>% group_by(subject) %>% summarise_at(mean, avgCorr)
ti <- th %>% group_by(subject) %>% summarise_at(avgCorr, mean)
th<- three %>% group_by(subject) %>% mutate(avgCorr = (correct0 + correct1 + correct2)/3)
ti <- th %>% group_by(subject) %>% summarise_at(avgCorr, mean)
ti <- th %>% group_by(subject) %>% summarise_at("avgCorr", mean)
ti
losers <- ti %>% filter(avgCorr<.4)
losers
three %>% filter(subject==515)
View(three %>% filter(subject==515))
losers
losers <- unique(losers$subject)
losers
losers[1]
as.numeric(losers[1])
losers <- as.numeric( unique(losers$subject) )
three %>% filter(subject != as.numeric(losers[1]))
View(three %>% filter(subject==515))
1/15*1/14
#Count as a swap both answer0 = response2 and  answer2 = response0
#To include middle swaps, count as answer0 = response1, answer1 = response0, answer2=response1, answer1 = response2
swap <- three %>% mutate(swap02 = (answer0==response2), swap20 = (answer2==response0))
head(swap)
three %>% select(starts_with("ans"),starts_with("resp"),starts_with("corr"))
#Delete irrelevant columns
swap <- three %>% select(subject,starts_with("ans"),starts_with("resp"),starts_with("corr")))
#Delete irrelevant columns
swap <- three %>% select(subject,starts_with("ans"),starts_with("resp"),starts_with("corr"))
swap
swap <- swap %>% mutate(swap02 = (answer0==response2), swap20 = (answer2==response0))
swap
swap
swap <- swap %>% mutate(swap02 = (answer0==response2) & (response2!=answer2)) #matches other one and is not correct (which can happen with repetitions)
swap <- three %>% select(subject,starts_with("ans"),starts_with("resp"),starts_with("corr"))
swap <- swap %>% mutate(swap02 = (answer0==response2) & (response2!=answer2)) #matches other one and is not correct (which can happen with repetitions)
head(swap)
head(swap)
head(swap)
swap
swap %>% filter(swap02==TRUE)
swap <- three %>% select(subject,starts_with("ans"),starts_with("resp"),starts_with("corr"))
swap <- swap %>% mutate(swap02 = (answer0==response2) & (response2!=answer2)) #matches other one and is not correct (which can happen with repetitions)
swap <- swap %>% mutate(swap20 = (answer2==response0) & (response0!=answer0)) #matches other one and is not correct (which can happen with repetitions)
swap <- swap %>% mutate(swap01 = (answer0==response1) & (response1!=answer1)) #matches other one and is not correct (which can happen with repetitions)
swap <- swap %>% mutate(swap10 = (answer1==response0) & (response0!=answer0)) #matches other one and is not correct (which can happen with repetitions)
swap <- swap %>% mutate(swap12 = (answer1==response2) & (response2!=answer2)) #matches other one and is not correct (which can happen with repetitions)
swap <- swap %>% mutate(swap21 = (answer2==response1) & (response1!=answer1)) #matches other one and is not correct (which can happen with repetitions)
#Add up how many swaps.  answer   A B C
#                        response C B B   - one swap
swap %>% mutate(swaps = swap02+swap20+swap01+swap10+swap12+swap21)
#Add up how many swaps.  answer   A B C
#                        response C B B   - one swap
swap<-swap %>% mutate(swaps = swap02+swap20+swap01+swap10+swap12+swap21)
table(swap$swaps)
ti <- three %>% group_by(subject) %>% summarise_at("swap", mean)
swappers <- ti %>% filter(avgCorr<.4)
head(ti)
ti <- swap %>% group_by(subject) %>% summarise_at("swap", mean)
ti
names(swap)
ti <- swap %>% group_by(subject) %>% summarise_at("swaps", mean)
ti
ggplot(ti, aes(x=swaps)) + geom_hist()
ggplot2(ti, aes(x=swaps)) + geom_hist()
library(ggplot2)
ggplot(ti, aes(x=swaps)) + geom_hist()
ggplot(ti, aes(x=swaps)) + geom_histogram()
?count
swap %>% mutate(twoOrMore = swaps>=2)
swap<-swap %>% mutate(twoOrMore = swaps>=2)
ti <- swap %>% group_by(subject) %>% summarise_at(c("twoOrMore","swaps", mean)
)
ti <- swap %>% group_by(subject) %>% summarise_at(c("twoOrMore","swaps"), mean)
ti
ggplot(ti, aes(x=twoOrMore)) + geom_histogram()
swappers <- ti %>% filter(twoOrMore>.2)
print(swappers)
swappers
table(three$subject)
head(three)
three[,2]
class(three[,2]) <- "numeric"
as.numeric(three[,2])
three$subject[1]
str(three$subject[1])
a<-three$subject[1]
as.numeric(a)
Ss <- three$subject
as.numeric(Ss)
three$subject<- as.numeric(Ss)
three
swappers
swappers <-  unique(swappers$subject)
as.numeric(swappers)
nExclusions<- three %>% filter(  !(subject %in% swappers)   )
afterExclusions<- three %>% filter(  !(subject %in% swappers)   )
unique(afterExclusions$subject)
unique(afterExclusions$subject) ==1011
afterExclusions
collapsed <- afterExclusions %>% group_by(subject) %>% summarise_at(c("correct0", "correct1","correct2"), mean, na.rm = TRUE)
oneTwo <- t.test(
x = collapsed$correct0
, y = collapsed$correct1
, paired = FALSE
)
oneTwo
twoThree <- t.test(
x = collapsed$correct1
, y = collapsed$correct2
, paired = FALSE
)
twoThree
?save_csv
library(readr)
?save_csv
?write_csv
dataWithPath<- file.path("dataAnonymized","PSYC1anonymized")
library(readr)
write_tsv(collapsed, file.path(dataWithPath,"threeLetterTaskAfterExclusions.tsv")
)
getwd()
write_tsv(collapsed, file.path(dataWithPath,"threeLetterTaskAfterExclusions.tsv"))
write_tsv(collapsed, file.path(dataWithPath,"threeLetterTaskAfterExclusions.tsv"))
dataWithPath<- file.path("dataAnonymized")
library(readr)
write_tsv(collapsed, file.path(dataWithPath,"threeLetterTaskAfterExclusions.tsv"))
collapsed
write_tsv(afterExclusions, file.path(dataWithPath,"threeLetterTaskAfterExclusions.tsv"))
#currently without most columns, until learn how to preserve text columns etc when taking mean
write_tsv(collapsed, file.path(dataWithPath,"threeLetterTaskAfterExclusionsCollapsedSs.tsv"))
ggplot(ti, aes(x=twoOrMore)) + geom_histogram()
print(swappers)
swappers <- ti %>% filter(twoOrMore>.2)
print(swappers)
ggplot(ti, aes(x=twoOrMore)) + geom_histogram()
devtools::install_github('alexholcombe/mixRSVP',build_vignettes=TRUE)
package_version('mixRSVP')
packageVersion('mixRSVP')
knitr::opts_chunk$set(echo = TRUE)
library(plyr) #need to load because need it for Rmisc, and recommended load it before dplyr
library(dplyr)
dataPath <- file.path("dataAnonymized")
#read data file created by demographicsAndExclusions.Rmd to get dataframe after exclusions
df<- readRDS(file = file.path(dataPath,"PSYC1_dfAfterConsentPracticeTrialsExclusions.rda"))
knitr::opts_chunk$set(echo = TRUE)
library(plyr) #need to load because need it for Rmisc, and recommended load it before dplyr
library(dplyr)
library(ggplot2)
tb<- df %>% mutate(leftTopBias = case_when(spatial == "horiz" ~ correct0 - correct1,
spatial == "vert" ~ correct1 - correct0,
TRUE ~ as.integer(-99)   )) #else, but this shouldn't occur
tb<- tb %>% mutate(canonical = ori==0)
#Look at one-target performance
tbOne <- tb %>% filter(oneTarget == "True")
#correct0 refers to left, correct1 to right.
#But for one-target trials, rightResponseFirst is the only thing that tells you which side it was on.
eachCorrOne<- tbOne %>% group_by(rightResponseFirst) %>% summarise_at(c("correct0","correct1"),mean)
print(eachCorrOne)
#Exclude trials with one target, three targets
tbTwo <- tb %>% filter(oneTarget == "False", numSimultaneousStim < 3)
#correct0 refers to left, correct1 to right.
eachCorrect<- tbTwo %>% summarise_at(c("correct0","correct1"),mean)
print(eachCorrect)
avgCorrect = rowMeans(eachCorrect)
#Inspect what ISIframes got up to
maxPossibleISIframes <- 9
maxEachSubject<- tb %>% filter(practice==0) %>% group_by(subject) %>% summarise(maxISI = max(ISIframes))
#Determine subject numbers who maxxed out
maxedOut <- unique(  tb %>% filter(ISIframes == maxPossibleISIframes)   )
ggplot(maxEachSubject, aes(x=maxISI)) + geom_histogram(binwidth=.5) +scale_x_continuous(breaks=seq(2,9))
#Exclusion criteria
correctExclusionThreshold <- .4
#Exclude trials with one target, three targets
tbTwo <- tb %>% filter(oneTarget == "False", numSimultaneousStim < 3)
#correct0 refers to left, correct1 to right.
overall<- tbTwo %>% group_by(subject) %>% summarise_at(c("correct0","correct1"),mean)
overall <- overall %>% mutate(pCorr = (correct0 + correct1)/2)
tooLow2 <- overall %>% filter(pCorr < correctExclusionThreshold)
cat("subjects who were too low in two-target condition are:")
tooLow2
#Exclude low performers in the 3-target condition
tbThree <- tb %>% filter(numSimultaneousStim == 3)
overall<- tbThree %>% group_by(subject) %>% summarise_at(c("correct0","correct1","correct2"),mean)
overall <- overall %>% mutate(pCorr = (correct0 + correct1 + correct2)/3)
tooLow3 <- overall %>% filter(pCorr < correctExclusionThreshold)
cat("subjects who were too low in three-target condition are:")
tooLow3
#Group by condition, which is defined by spatial,stimType,flipped,orient
#table(tbTwo$spatial,tbTwo$flipped,tbTwo$ori,tbTwo$stimType)
#Then plot difference between correct0 and correct1. One way to get difference is subtract correct1 from correct0 and average
#tbTwo$leftBtmBias <- tbTwo$correct0-tbTwo$correct1
tbTwo <- tbTwo %>% mutate(flippedTemp = substr(flipped,1,1)) #reduce to first letter only
tbTwo <- tbTwo %>% mutate(cond = paste(stimType, spatial, ori, flipped, sep = '_'))
tbTwo <- tbTwo %>% mutate(condExceptStim = paste(spatial, ori, flippedTemp, sep = '_'))
gg<- ggplot(tbTwo, aes(x=condExceptStim,y=leftTopBias)) + stat_summary(fun.y="mean",geom="point",size=2, alpha=.5) + facet_grid(stimType~.)
#xondition name is paste(numSimultaneousStim, stimType, spatial, ori, flipped, sep = '_'))
gg<- gg + xlab("horiz/vert_orientation_flippedT/F")
gg<- gg+ stat_summary(fun.data="mean_cl_boot",fun.args=list(conf.int=0.95),geom="errorbar",width=.3,size=1)
show(gg)
#Group by condition, which is defined by spatial,stimType,flipped,orient
#table(tbTwo$spatial,tbTwo$flipped,tbTwo$ori,tbTwo$stimType)
#Then plot difference between correct0 and correct1. One way to get difference is subtract correct1 from correct0 and average
#tbTwo$leftBtmBias <- tbTwo$correct0-tbTwo$correct1
tbTwo <- tbTwo %>% mutate(flippedTemp = substr(flipped,1,1)) #reduce to first letter only
tbTwo <- tbTwo %>% mutate(cond = paste(stimType, spatial, ori, flipped, sep = '_'))
tbTwo <- tbTwo %>% mutate(condExceptStim = paste(spatial, ori, flippedTemp, sep = '_'))
gg<- ggplot(tbTwo, aes(x=condExceptStim,y=leftTopBias)) + stat_summary(fun="mean",geom="point",size=2, alpha=.5) + facet_grid(stimType~.)
#xondition name is paste(numSimultaneousStim, stimType, spatial, ori, flipped, sep = '_'))
gg<- gg + xlab("horiz/vert_orientation_flippedT/F")
gg<- gg+ stat_summary(fun.data="mean_cl_boot",fun.args=list(conf.int=0.95),geom="errorbar",width=.3,size=1)
show(gg)
wordsByS <- tbTwo %>% filter(stimType=="word") %>% group_by(subject,spatial) %>% summarise_at(c("correct0","correct1"),mean)
wordsByCond<- wordsByS %>% group_by(spatial)  %>% summarise_all(mean)
wordsByCond
ltrs2 <- tbTwo %>% filter(stimType=="letter")
# gg<- ggplot(ltrs2, aes(x=condExceptStim,y=leftTopBias)) + stat_summary(fun.y="mean",geom="point",size=2, alpha=.5) + facet_grid(.~canonical)
# gg<- gg+ stat_summary(fun.data="mean_cl_boot",fun.args=list(conf.int=0.95),geom="errorbar",width=.3,size=1)
# show(gg)
ltrs2<- ltrs2 %>% mutate(cond = case_when(condExceptStim == "vert_-90_F" ~ "facing up",
condExceptStim == "vert_90_F" ~ "facing down",
condExceptStim == "vert_0_F" ~ "facing right",
TRUE ~ "unknown"   )) #e
# gg<- ggplot(rotated, aes(x=condExceptStim,y=leftTopBias)) + stat_summary(fun.y="mean",geom="point",size=2, alpha=.5) + stat_summary(fun.data="mean_cl_boot",fun.args=list(conf.int=0.95),geom="errorbar",width=.3,size=1)
# show(gg)
vert<- ltrs2 %>% filter(spatial=="vert")
library('beeswarm')
papaja::apa_beeplot(data=vert, id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "orientation",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
#apa_print() output looks horrible unless knit into PDF or Word as part of a papaja document
#papaja::apa_print(t_vert)
# rotatedOnly <- ltrs2 %>% filter(canonical==FALSE)
# papaja::apa_beeplot(data=rotatedOnly, id="subject", dv="leftTopBias", factors="cond",
#                     ylab = "upper - lower (proportion correct)", xlab = "orientation",
#                     args_points = list(cex = 1, bg = c("black"),col="black"),
#                     args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
#                     , args_error_bars = list(lwd=2.2,length = 0.13))
# abline(h=0)
ggsave("figures/topBiasTwoLtrs.png")
papaja::apa_beeplot(data=vert, id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "orientation",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
trialsPerCondSubj <- vert %>% count(cond,subject)
subjPerCond <- trialsPerCondSubj %>% count(cond)
print(subjPerCond)
vert<- ltrs2 %>% filter(spatial=="vert")
papaja::apa_beeplot(data= filter(vert, cond=="facing right",
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "orientation",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
vert<- ltrs2 %>% filter(spatial=="vert")
filter(vert, cond=="facing right")
papaja::apa_beeplot(data= filter(vert, cond=="facing right"),
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "orientation",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
papaja::apa_beeplot(data= filter(vert, cond=="facing right"),
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "orientation",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
papaja::apa_beeplot(data= filter(vert, cond=="facing up"),
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "orientation",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
ggsave("figures/topBiasTwoLtrsFacingUp.png")
papaja::apa_beeplot(data= filter(vert, cond=="facing right"),
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "facing right",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
ggsave("figures/topBiasTwoLtrsFacingRight.png")
papaja::apa_beeplot(data= filter(vert, cond=="facing up"),
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "facing up",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
ggsave("figures/topBiasTwoLtrsFacingUp.png")
fr<- papaja::apa_beeplot(data= filter(vert, cond=="facing right"),
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "facing right",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
show(fr)
fr
papaja::apa_beeplot(data= filter(vert, cond=="facing right"),
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "facing right",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
papaja::apa_beeplot(data= filter(vert, cond=="facing up"),
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "facing up",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
papaja::apa_beeplot(data= filter(vert, cond=="facing right" | cond=="facing up"),
id="subject", dv="leftTopBias", factors="cond",
ylab = "upper - lower (proportion correct)", xlab = "facing right",
args_points = list(cex = 1, bg = c("black"),col="black"),
args_swarm = list(cex = .3, bg = c("white"),col="grey50"),
, args_error_bars = list(lwd=2.2,length = 0.13))
abline(h=0)
